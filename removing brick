#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#pragma warning(disable:4996)
#include <windows.h>


// 全局变量
int ball_x, ball_y; // 小球位置
int high, width; //  游戏画面尺寸
int ball_vx, ball_vy; // 小球的速度
int position_x, position_y; //挡板中心
int ridus;//挡板半径
int left, right; //挡板左右边界位置
int ball_number;
int isFailed;



void gotoxy(int x, int y)//类似于清屏函数，光标移动到原点位置进行重画
{
	HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD pos;
	pos.X = x;
	pos.Y = y;
	SetConsoleCursorPosition(handle, pos);
}
int startup()
{
	high = 18;
	width = 25;
	ball_x = 1;
	ball_y = width / 2;
	ball_vx = 1;
	ball_vy = 1;
	position_x = high;
	position_y = width / 2;
	ridus = 5;
	left = position_y - ridus;
	right = position_y + ridus; 
	ball_number = 0;
	isFailed = 0;
	
	
}


void show()
{
	gotoxy(0, 0);//将光标移动到原点进行重写
	int i, j;
	for (i = 0; i <= high + 1; i++)
	{
		for (j = 0; j <= width; j++)
		{
			if ((i == ball_x) && (j == ball_y))
				printf("0");   //输出小球
			else if (j == width)
			{
				printf("|"); //输出右边界
			}
			else if (i == high + 1)
			{
				printf("-"); //输出下边界
			}
			else if ((i == high) && (j >= left) && (j <= right))
			{
				printf("*"); //输出挡板
			}

			else
				printf(" ");

		}
		printf("\n");

	}
	while (isFailed == 0)
	{
		printf("游戏分数：%d", ball_number);
		break;
	}
	while (isFailed)
	{
		//gotoxy(0, 0);//将光标移动到原点进行重写
		int i, j;
		for (i = 0; i <= high + 1; i++)
		{
			for (j = 0; j <= width; j++)
			{
				if ((i == ball_x) && (j == ball_y))
					printf("0");   //输出小球
				else if (j == width)
				{
					printf("|"); //输出右边界
				}
				else if (i == high + 1)
				{
					printf("-"); //输出下边界
				}
				else if ((i == high) && (j >= left) && (j <= right))
				{
					printf("*"); //输出挡板
				}

				else
					printf(" ");

			}
			printf("\n");

			printf("游戏失败,按1重来，其他键退出");
			isFailed = getch();
			if (isFailed=='1')
			{
	          return isFailed=1;
			}
			else
			{
				exit(0);
			}
		
			

		}
	}
}

void updateWithoutInput()
{
	//根据速度更新小球的位置
	ball_x = ball_x + ball_vx;
	ball_y = ball_y + ball_vy;
	//碰到边界后，改变速度的方向
	if ((ball_y == 0) || (ball_y == width - 1))
		ball_vy = -ball_vy;	
	//if ((ball_x == 0) || (ball_x == high - 1))
	if (ball_x == 0)
		ball_vx = -ball_vx;
	
	if ((ball_x == high-1) && (ball_y >= left) &&(ball_y <= right))
	{
		ball_vx = -ball_vx;
		ball_number++;
	}
	if ((ball_x == high - 1) && ((ball_y < left) || (ball_y > right)))
	{
		isFailed = 1;
	}

	Sleep(100);
}
	


void updateWithInput()
{
	char input;
	if (kbhit())
	{
		input = getch();
		if (input == 'a')
		{
			position_y--;
			left = position_y - ridus;
			right = position_y + ridus;

		}
		if (input == 'd')
		{
			position_y++;
			left = position_y - ridus;
			right = position_y + ridus;

		}
		
		
	}
}
void main()
{
	while (1)
	{
		system("cls");
		startup();    // 数据初始化
		while (1)  //  游戏循环执行
		{
			show();   // 显示画面
			if (isFailed ==1)
			{
				break;
			}
			updateWithoutInput();  // 与用户输入无关的更新
			updateWithInput();  // 与用户输入有关的更新

		}

	}
	
}
